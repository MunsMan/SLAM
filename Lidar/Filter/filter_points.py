import numpy as npclass Filter:		def __init__(self, points1, points2, thresh):		self.p1 = np.array(points1)		self.p2 = np.array(points2)		self.thresh = thresh		@staticmethod	def cal(points):		pa = []		for i in range(points.shape[1]):			p = []			for x in range(points.shape[0]):				dx = abs(np.sum(np.abs(points[:, i] - points[x, i])) / (points.shape[0] - 1))				p.append([dx])			p = abs(p - np.mean(p))			pa.append(p)				return np.array(pa)		def filter(self):		error = np.sum(np.abs(self.cal(self.p1) - self.cal(self.p2)))		while error > self.thresh:			dl = np.abs(self.cal(self.p1) - self.cal(self.p2))			self.p1 = np.delete(self.p1, np.where(np.isin(dl, np.max(dl)))[1], 0)			self.p2 = np.delete(self.p2, np.where(np.isin(dl, np.max(dl)))[1], 0)			error = np.sum(np.abs(self.cal(self.p1) - self.cal(self.p2)))			print(error)		return self.p1, self.p2if __name__ == '__main__':	points1 = np.array([[1, 1],	                    [1, 3],	                    [2, 2],	                    [3, 1],	                    [5, 3]])	points2 = np.array([[2, 1],	                    [2, 3],	                    [3, 2],	                    [4, 1],	                    [7, 3]])	points1, points2 = Filter(points1, points2, 0.1).filter()	print(points1)	print(points2)